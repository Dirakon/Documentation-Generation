["<explanation>\nA program that monitors version changes for a specific program in a branch. It continuously checks for updates, reads existing data from a storage file, gets the current version, actualizes the data with the new version, and writes it back to storage. It also outputs the version history as an RSS feed. The application communicates with an external system to get branch information, program name, and version numbers, and logs its activities to stdout.\n</explanation>","<explanation>\nThe `program-data-storage` class is responsible for handling storage and retrieval of program version data on the filesystem. \n\nIt takes a `state-path` parameter which defines the root directory for storing the data. The class provides three main functions:\n\n1. `data-file`: Creates a file object representing the path where the data for a specific branch and program name is stored. It also ensures the directory for this file exists.\n\n2. `read`: Retrieves stored program version data for a specified branch and program name. If the data file exists, it reads the content, parses each line as a program version (in the format \"version|||timestamp\"), and returns a program-data object. If the file doesn't exist, it returns an empty program-data object.\n\n3. `write`: Serializes a program-data instance's versions to the appropriate file. Each version is formatted as \"version-number|||timestamp\" with newlines between entries. The function logs the serialized content, writes it to the file, and returns the program-data instance.\n\nThe class essentially acts as a data access layer, abstracting the file operations needed to persist and retrieve program version history.\n</explanation>","<explanation>\nThis function outputs an RSS feed representation of program version history. It takes the program data (branch, program name, and versions) and creates an RSS XML document with channel information, including a title, link to NixOS packages search for the program, and a description. Each version in the history is represented as an RSS item with the version number, a link to search for the package, and a timestamp of when the version was added. The function outputs the XML directly to stdout, prepended with \"Rss:\" and counts the total number of lines in the output.\n</explanation>","<explanation>\nUpdates a program data structure with a new version if it's not already the latest one. Takes a `new-version` parameter and checks if this version is already the last one in the version history. If the version history is empty or the new version is not the last one, it adds the new version to the list. Otherwise, it keeps the version history unchanged. Returns a program data object with the potentially updated version history.\n</explanation>","<explanation>\nA simple data structure that represents a version of a program. It consists of two parts:\n1. `version-number` - Identifier for the version (likely a string)\n2. `timestamp` - Unix timestamp when the version was recorded\n\nThe object evaluates to its `version-number` when used, as indicated by the `@` marker.\n</explanation>","<explanation>\nA utility object for interacting with external systems, enabling operations like file I/O, command execution, and logging. It facilitates communication with an external system through a request-response pattern, where commands are sent and responses are received through standard I/O streams.\n\nKey components:\n- `line-counter`: Outputs a formatted line count message\n- `output-multiline`: Handles multi-line text output with line counting\n- `log`: Logs messages with a header\n- `write`: Writes content to a file by sending a command and the content\n- `read`: Reads file content by sending a command and collecting the response\n- `send-command`: Formats and sends commands to the external system\n- `get-response` and `get-confirmation`: Retrieve responses from the external system\n- `version`: Gets the version of a program in a specific branch\n- `branch` and `program-name`: Get the current branch and program name\n\nThe object uses a command separator (\"|||\") for formatting commands with multiple parameters.\n</explanation>"]