["<explanation>\nApplication that periodically checks for a program's version, maintains state in a file, and outputs updates as RSS feed. It uses external commands for version checking and I/O operations. The main loop reads current state, checks for new versions, writes updated state, and generates RSS XML output with version history.\n</explanation>\n<doctest-code>\n[] > doctest\n  app > @\n    \"state-dir\"\n</doctest-code>\n<doctest-stdin>\nnixos-unstable\nmy-program\n1.2.3\n(lines: 1)\nOK\n</doctest-stdin>\n<doctest-output>\nLog:\nReading...\nLog:\nGetting current version\nLog:\nWriting...\nRss:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>my-program versions</title>\n  <link>https://search.nixos.org/packages?channel=nixos-unstable&from=0&size=50&sort=relevance&type=packages&query=my-program</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.2.3</title>\n    <link>https://search.nixos.org/packages?channel=nixos-unstable&from=0&size=50&sort=relevance&type=packages&query=my-program</link>\n    <description>New version at 0</description>\n  </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nManages storage and retrieval of program version data by reading from and writing to files, handling serialization of version records as lines in the format \"version-number|||timestamp\".\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data-storage \"state-dir\" > storage\n  storage.read \"main\" \"test\" > data\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        data.versions.at 0.version-number\n</doctest-code>\n<doctest-stdin>\n(lines: 1)\n1.0|||123\n</doctest-stdin>\n<doctest-output>\nRequest: read-file|||state-dir/main/test\n1.0\n</doctest-output>","<explanation>\nRepresents program data with versions and generates an RSS feed. The object holds a branch name, program name, and list of versions. The `output-as-rss` method constructs an RSS XML string from stored versions and writes it to stdout with line count metadata. The `actualized` method appends a new version to the list if it's not already the latest entry.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data > data\n    \"unstable\"\n    \"nginx\"\n    *\n      program-version \"1.18.0\" 1625097600\n      program-version \"1.20.1\" 1633104000\n  data.output-as-rss > @\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>nginx versions</title>\n  <link>https://search.nixos.org/packages?channel=unstable&from=0&size=50&sort=relevance&type=packages&query=nginx</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.18.0</title>\n    <link>https://search.nixos.org/packages?channel=unstable&from=0&size=50&sort=relevance&type=packages&query=nginx</link>\n    <description>New version at 1625097600</description>\n  </item>\n  <item>\n    <title>1.20.1</title>\n    <link>https://search.nixos.org/packages?channel=unstable&from=0&size=50&sort=relevance&type=packages&query=nginx</link>\n    <description>New version at 1633104000</description>\n  </item>\n</channel>\n\n</rss>\n(lines: 20)\n</doctest-output>","<explanation>\nThe 'actualized' function updates the program's version list by appending a new version only if it is not already the latest version, preventing duplicates.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data > data\n    \"main\"\n    \"myapp\"\n    *\n      program-version \"v1\" 123\n  data.actualized (program-version \"v1\" 123) > new-data\n  new-data.output-as-rss > @\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 15)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\\n<rss version=\"2.0\">\\n\\n<channel>\\n  <title>myapp versions</title>\\n  <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=myapp</link>\\n  <description>History of versions</description>  <item>\\n    <title>v1</title>\\n    <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=myapp</link>\\n    <description>New version at 123</description>\\n  </item>\\n</channel>\\n\\n</rss>\\n\n</doctest-output>","<explanation>\nRepresents a program version with a version number and timestamp. When evaluated, returns the version number string. The timestamp is stored as an integer but not directly exposed through the primary interface.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        program-version\n          \"1.0.0\"\n          1690900000\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n1.0.0\n</doctest-output>","<explanation>\nThe 'external' object provides utilities for interacting with external systems, including logging, reading/writing files, executing commands, and retrieving version/branch information. It handles IO operations through formatted request protocols and manages input/output synchronization.\n</explanation>\n<doctest-code>\n[] > doctest\n  external.log > @\n    \"Test\\ninput\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 2)\nTest\ninput\n</doctest-output>"]