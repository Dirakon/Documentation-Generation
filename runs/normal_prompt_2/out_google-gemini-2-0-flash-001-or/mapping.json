["```\n<explanation>\nThe `app` object is the main entry point of the application. It takes a list of arguments `args`, extracts the first argument as the `state-path`, and then enters a loop to fetch and update program version data. It interacts with external sources (like a package manager) for version information and local storage to persist it.\n\nHere's a breakdown:\n\n1.  **`app`**:\n    *   `state-path`: Derives the path to store state information from the first command-line argument.\n    *   `while`: An infinite loop (using `true`) that repeatedly:\n        *   Fetches the `branch` and `program-name` using external calls.\n        *   Retrieves the previously saved `data` for a given `branch` and `program-name` combination.\n        *   Gets the `current-version` of the program from an external source.\n        *   `actualized`: Merges the `current-version` with previously saved `data` to produce updated `new-data`.\n        *   Writes the `new-data` to the `storage` at the `state-path`.\n        *   Outputs the updated information as an RSS feed.\n\n2.  **`version`**:\n    *   Retrieves the new `version-number` from an external source.\n    *   Combines the given `version-number` with the current timestamp.\n\n3.  **`currently-saved-data`**:\n    *   Reads the previously data for a given `branch` and `program-name` from local storage.\n\n4.  **`current-time`**:\n    *   Retrieves the current timestamp.\n\n5.  **`program-data-storage`**:\n    *   Given a `state-path` creates storage and handles reading/writing `program-data`.\n        *   `data-file` calculates the file path where the data will be stored given a `branch` and `program-name`.\n        *   `read` reads the previously saved data from the file system.\n        *   `write` writes new data into the file system in a `version|||timestamp` format.\n\n6.  **`program-data`**:\n    *   Stores information about one program.\n        *   `output-as-rss` outputs to the stdout the rss of given `program-data` (generates XML RSS feed).\n        *   `actualized` decides wether we should write the new `version` to the `versions` array.\n\n7.  **`program-version`**:\n    *   Represents version of a a given `program`.\n\n8.  **`external`**:\n    *   Defines the \"external\" functions used by the main logic of the application. It mocks calling some external non-EO code.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        app\n          \"path-to-state\"\n</doctest-code>\n<doctest-stdin>\nRequest: get-version|||main|||org.eolang\n1.2.3\nRequest: get-version|||main|||org.eolang\n1.2.4\nRequest: get-version|||main|||org.eolang\n1.2.5\nRequest: get-version|||main|||main\n1.2.3\nRequest: get-version|||main|||main\n1.2.4\nRequest: get-version|||main|||main\n1.2.5\n</doctest-stdin>\n<doctest-output>\nRequest: get-version|||main|||org.eolang\n(lines: 0)\nLog:\n\nRequest: get-version|||main|||org.eolang\n(lines: 0)\nRss:\n(lines: 15)\n(lines: 0)\nRequest: get-version|||main|||org.eolang\n(lines: 0)\nLog:\n\nRequest: get-version|||main|||main\n(lines: 0)\nRss:\n(lines: 15)\nLog:\n\nRequest: get-version|||main|||main\n(lines: 0)\nRequest: get-version|||main|||main\n(lines: 0)\n</doctest-output>\n```","```\n<explanation>\nThis object encapsulates the logic for storing and retrieving program data, specifically versions. It uses a file system path (`state-path`) to organize data by branch and program name.\n\nKey functionalities:\n\n- `data-file`: Constructs the file path where data for a specific branch and program is stored. It creates the necessary directories if they don't exist.\n- `read`: Reads program data from a file. If the file exists, it parses the content, expecting each line to be in the format \"version_number|||timestamp\". It returns a `program-data` object containing the parsed versions. If the file doesn't exist, it returns an empty `program-data` object.\n- `write`: Writes program data to a file. It serializes the versions stored in a `program-data` instance into a string format (\"version_number|||timestamp\" per line) and writes it to the corresponding data file.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        program-data-storage\n          \"test_state_path\"\n        \"test_branch\"\n        \"test_program\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\ntest_state_path\n</doctest-output>\n```","```\n<explanation>\nThis is object named `program-data`, that represents the data associated with a specific program and branch. The constructor takes the branch, program name and list of versions as input. It mainly focuses on the management and output of program version information in RSS format.\n\nThe most important function is `output-as-rss` which generates and outputs an RSS feed containing the version history of the program. In particular it generates the xml formatted output into stdout stream. Other functions include `actualized` which add versions to `program-data` object.\n</explanation>\n<doctest-code>\n[] > doctest\n  external.program-name > program-name\n  external.branch > branch\n  [version-1 1000 version-2 2000] > version-list\n    [val timestamp] > program-version\n      val > @\n  program-data > data\n    branch\n    program-name\n    QQ.structs.list\n      program-version\n        version-1\n        1000\n      program-version\n        version-2\n        2000\n  data.output-as-rss > @\n</doctest-code>\n<doctest-stdin>\nRequest: program-name\ntest-program\nRequest: branch\ntest-branch\nRequest: get-version|||test-branch|||test-program\n1.2.3\n</doctest-stdin>\n<doctest-output>\nRequest: (lines: 12)\n\nRequest: write-file||||||\nRss:\nLog:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-program versions</title>\n  <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n  <description>History of versions</description>\n  <item>\n    <title>version-1</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n    <description>New version at 1000</description>\n  </item>\n  <item>\n    <title>version-2</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n    <description>New version at 2000</description>\n  </item>\n</channel>\n\n</rss>\n\n</doctest-output>\n```","```\n<explanation>\nThe provided EO code defines a system for managing and tracking versions of programs, potentially for integration with a system like NixOS. Here's a breakdown of the `actualized` function:\n\nThe `actualized` method's goal is to add `new-version` to the existing `versions` list, while preserving the existing data. Crucially, it only adds the new version if it's different from the most recent version in the `versions` list. The `actualized` function adds `new-version` to the end of `version` list only if it is not the latest version.\n</explanation>\n<doctest-code>\n[] > dummy-program-data\n  [branch program-name versions] > @\n\n[] > dummy-program-version\n  [version-number timestamp] > @\n\n[] > doctest\n  dummy-program-data > data\n    \"test_branch\"\n    \"test_program\"\n    *\n      tuple.empty\n  dummy-program-version > new-version\n    \"1.2.3\"\n    1678886400\n  # Simulate external interaction\n  data.actualized > updated-data\n    new-version\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      * (updated-data.versions.with new-version)\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n[tuple(Î½1.2.3, 1678886400)]\n</doctest-output>\n```","```\n<explanation>\nThis is an object that represents a version of a program. It takes a version number and a timestamp as input. The object itself evaluates to the version number.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        program-version\n          \"1.2.3\"\n          1678886400\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n1.2.3\n</doctest-output>\n```","```\n<explanation>\nObject responsible for external interactions. It simulates interaction with external systems via standard input and output. Specifically, it handles sending commands, retrieving responses, reading and writing files, logging messages, and fetching version and program information. The responses for requests are expected on stdin.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    seq > @\n      *\n        external.log\n          \"test output\"\n        external.write\n          \"test-file\"\n          \"test-content\"\n        external.read\n          \"test-file\"\n        external.version\n          \"test-branch\"\n          \"test-program\"\n        external.program-name\n        external.branch\n        external.line-counter\n          123\n</doctest-code>\n<doctest-stdin>\nRequest: program-name\ntest-program\nRequest: branch\ntest-branch\nRequest: get-version|||test-branch|||test-program\n1.2.3\nRequest: read-file|||test-file\n(lines: 1)\ntest-content\nRequest: write-file|||test-file\nConfirmation: file written\nConfirmation: command received\nConfirmation: command received\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 1)\ntest output\nRequest: write-file|||test-file\n(lines: 1)\ntest-content\nRequest: read-file|||test-file\nRequest: get-version|||test-branch|||test-program\nRequest: program-name\nRequest: branch\n(lines: 1)\n(lines: 123)\n</doctest-output>\n```"]