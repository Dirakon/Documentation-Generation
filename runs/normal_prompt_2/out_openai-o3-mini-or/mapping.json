["<explanation>\nMain application function that continuously updates stored program data. It uses the first argument as a state‐storage path and then enters an endless loop where it:\n• Obtains the branch and program name from external sources.\n• Logs that it is “Reading…” and retrieves the currently saved data from file storage.\n• Logs that it is “Getting current version” and then requests the current version (which is combined with the current time).\n• Actualizes (updates) the stored data with the new version.\n• Logs that it is “Writing…”, writes the updated data back to storage, and finally outputs an RSS feed representation of the data.\n</explanation>\n<doctest-code>\n[] > doctest\n  app > @\n    *\n      \"dummy_state_path\"\n</doctest-code>\n<doctest-stdin>\nmain\nmyapp\n1.0\nok\n</doctest-stdin>\n<doctest-output>\nRequest: branch\nRequest: program-name\nLog:\n(lines: 1)\nReading...\nLog:\n(lines: 1)\nGetting current version\nRequest: get-version|||main|||myapp\nLog:\n(lines: 1)\nWriting...\nLog:\n(lines: 2)\n1.0|||1234567890\nRequest: write-file|||dummy_path\n(lines: 2)\n1.0|||1234567890\nRss:\n(lines: 15)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>myapp versions</title>\n  <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=myapp</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.0</title>\n    <link>https://search.nixos.org/packages?channel=main&from=0&size=50&sort=relevance&type=packages&query=myapp</link>\n    <description>New version at 1234567890</description>\n  </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nA storage adapter for program data based on a file system. It is parameterized by a state-path and provides three functions:\n1. data‐file: Constructs a file object (and its directory) from a branch and program name.\n2. read: Reads the stored program data from the corresponding file. It checks if the file exists and, if so, reads its content, splits it into lines, and converts each line into a version record using the program version parser; otherwise it returns an empty data list.\n3. write: Serializes a given program data instance (its list of versions) into a string (each version stored as \"version-number|||timestamp\\n\"), logs it, writes it to the data file, and returns the program data instance.\n</explanation>\n<doctest-code>\n[] > doctest\n  # Using a fixed state-path, branch and program-name to demonstrate the file path construction.\n  program-data-storage.data-file > file\n    \"dev\"\n    \"app\"\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"File path: %s\"\n      *\n        file\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nFile path: /state/dev/app\n</doctest-output>","<explanation>\nAn object that encapsulates a program’s version history. It accepts three parameters – a branch name, a program name, and a list of version records – and provides two main functions. The first, output-as-rss, builds and prints an RSS XML feed representing the version history (combining a header, an itemized list of each version with its timestamp, and a footer). The second, actualized, takes a new version record and updates the version list by appending it if the new version does not duplicate the last stored version.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data.output-as-rss > @\n    \"stable\"\n    \"myapp\"\n    *\n      program-version \"1.0\" 1630000000\n      program-version \"1.1\" 1631000000\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 20)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>myapp versions</title>\n  <link>https://search.nixos.org/packages?channel=stable&from=0&size=50&sort=relevance&type=packages&query=myapp</link>\n  <description>History of versions</description>\n\n  <item>\n    <title>1.0</title>\n    <link>https://search.nixos.org/packages?channel=stable&from=0&size=50&sort=relevance&type=packages&query=myapp</link>\n    <description>New version at 1630000000</description>\n  </item>\n  <item>\n    <title>1.1</title>\n    <link>https://search.nixos.org/packages?channel=stable&from=0&size=50&sort=relevance&type=packages&query=myapp</link>\n    <description>New version at 1631000000</description>\n  </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nThis function, named \"actualized\", belongs to the \"program-data\" object. It takes a new version (new-version) and returns a new instance of program-data with an updated versions list. If the versions list is not empty and its last element equals the new version, it leaves the versions unchanged; otherwise, it appends the new version to the list.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      *\n        ([branch program-name versions] > prog-data\n           \"stable\"\n           \"calc\"\n           QQ.structs.list tuple.empty\n         ).actualized\n           \"v1.0.0\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\ncalc\n</doctest-output>","<explanation>\nExtracts and returns the version number, ignoring the timestamp.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%d\"\n      *\n        program-version\n          42\n          1609459200\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n42\n</doctest-output>","<explanation>\nProvides an interface for external interactions. It bundles several helper functions for logging, multiline output, file I/O, sending commands, and receiving responses. The functions format messages (e.g. counting lines, prepending “Request: ”) and coordinate external command execution.\n</explanation>\n<doctest-code>\n[] > doctest\n  external.log > @\n    \"Hello\\nWorld\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 2)\nHello\nWorld\n</doctest-output>"]