# This code defines a system for managing and retrieving program version data, likely for a software update or version tracking system. It utilizes external commands via stdin/stdout for file operations and retrieving version information. The core functionality revolves around reading, writing, and managing version data for different programs and branches, storing this data on the file system.
# The main structure is defined inside `app` node. This structure initiates a loop, retrieves and writes version data, extracts version information using external commands, and handles data serialization and deserialization, along with creating output as RSS with links.
# Key components:
# - `app`:  The entry point, setting up necessary paths, and managing the main loop. It reads and writes data from storage using external tools.
# - `program-data-storage`: Manages storage for program data (reading and writing files).
# - `program-data`: Represents the program data with versions.  It generates RSS output for these versions.
# -  `external`:  A collection of external commands (read/write/log/etc.) used to interact with the operating system (files, getting versions etc.)
# - `version`: Retrieves the current version number from an external source.
# - `currently-saved-data` Retrieves the saved data.
# - `program-version`: Combines version number and timestamp.
[args] > app
  QQ.fs.path > state-path
    args.at 0
  seq > @
    *
      while
        true > [i] >>
        [i] >>
          seq > @
            *
              external.branch > branch
              external.program-name > program-name
              external.log
                "Reading..."
              currently-saved-data > data
                branch
                program-name
              external.log
                "Getting current version"
              version > current-version
                branch
                program-name
              data.actualized > new-data
                current-version
              program-data-storage > storage
                state-path
              external.log
                "Writing..."
              storage.write
                new-data
              new-data.output-as-rss

  [branch program-name] > version
    seq > @
      *
        external.version > version-number
          branch
          program-name
        program-version
          version-number
          current-time.tv-sec

  [branch program-name] > currently-saved-data
    seq > @
      *
        program-data-storage > storage
          state-path
        storage.read > data
          branch
          program-name

  [] > current-time
    output. > @
      QQ.sys.posix
        "gettimeofday"
        * QQ.sys.posix.timeval

# <STRUCTURE-BELOW-IS-TO-BE-DOCUMENTED>
[state-path] > program-data-storage
  state-path > @
  [branch program-name] > data-file
    QQ.fs.file > file
      QQ.fs.path.joined
        *
          state-path
          QQ.fs.path
            branch
          QQ.fs.path
            program-name
    QQ.fs.dir > directory
      QQ.fs.file
        QQ.fs.path
          file.dirname
    seq > @
      *
        directory.made
        file

  [branch program-name] > read
    data-file > file
      branch
      program-name
    file.path > src
    seq > @
      *
        if.
          exists.
            QQ.fs.file
              src
          seq
            *
              external.read > content
                file
              program-data
                branch
                program-name
                mapped.
                  QQ.structs.list
                    split.
                      content
                      "\n"
                  [line] >>
                    program-version > @
                      at.
                        QQ.txt.sscanf
                          "%s|||%d"
                          line
                        0
                      at.
                        QQ.txt.sscanf
                          "%s|||%d"
                          line
                        1
          seq
            *
              program-data
                branch
                program-name
                QQ.structs.list
                  tuple.empty

  [program-data-instance] > write
    data-file > file
      program-data-instance.branch
      program-data-instance.program-name
    seq > @
      *
        program-data-instance.versions.reduced > serialized-versions
          QQ.txt.text
            ""
          [accum version]
            chained. > @
              accum
              *
                QQ.txt.text
                  version.version-number
                QQ.txt.text
                  "|||"
                QQ.txt.text
                  QQ.txt.sprintf
                    "%d"
                    * version.timestamp
                QQ.txt.text
                  "\n"
        external.log
          serialized-versions
        external.write
          file
          serialized-versions
        program-data-instance

# <STRUCTURE-BELOW-IS-TO-BE-DOCUMENTED>
[branch program-name versions] > program-data
  program-name > @

  # Have some weird stackoverflow problems if I try to separate rss-string creation and the output.
  # Therefore, I have to break responsibilities here and unify rss-string creation and the ouput.
  [] > output-as-rss
    QQ.txt.sprintf > prefix
      "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>%s versions</title>\n  <link>https://search.nixos.org/packages?channel=%s&from=0&size=50&sort=relevance&type=packages&query=%s</link>\n  <description>History of versions</description>"
      * program-name branch program-name
    [] > output-middle-part
      seq > @
        mapped.
          versions
          [version] >>
            QQ.io.stdout > @
              QQ.txt.sprintf
                "  <item>\n    <title>%s</title>\n    <link>https://search.nixos.org/packages?channel=%s&from=0&size=50&sort=relevance&type=packages&query=%s</link>\n    <description>New version at %d</description>\n  </item>\n"
                * version.version-number branch program-name version.timestamp
    "</channel>\n\n</rss>" > suffix
    seq > @
      *
        QQ.io.stdout
          "Rss:\n"
        5.times versions.length > number-of-lines-middle
        7 > prefix-lines
        3 > suffix-lines
        (number-of-lines-middle.plus prefix-lines).plus suffix-lines > number-of-lines
        external.line-counter number-of-lines
        QQ.io.stdout
          prefix
        QQ.io.stdout
          "\n"
        output-middle-part
        QQ.io.stdout
          suffix
        QQ.io.stdout
          "\n"

  # <STRUCTURE-BELOW-IS-TO-BE-DOCUMENTED>
  [new-version] > actualized
    program-data > @
      branch
      program-name
      if.
        and.
          eq.
            last-index-of.
              versions
              new-version
            versions.length.minus 1
          not.
            versions.is-empty
        versions
        versions.with new-version

# <STRUCTURE-BELOW-IS-TO-BE-DOCUMENTED>
[version-number timestamp] > program-version
  version-number > @

# <STRUCTURE-BELOW-IS-TO-BE-DOCUMENTED>
[] > external
  "" > @
  "|||" > command-separator

  [line-count] > line-counter
    QQ.io.stdout > @
      QQ.txt.sprintf
        "(lines: %d)\n"
        * line-count

  [content] > output-multiline
    QQ.txt.text > text-content
      content
    split. > lines
      text-content
      "\n"
    seq > @
      *
        line-counter
          lines.length
        QQ.io.stdout
          QQ.txt.sprintf
            "%s\n"
            * content

  [text] > log
    seq > @
      *
        QQ.io.stdout
          "Log:\n"
        output-multiline
          text

  [file content] > write
    QQ.txt.text > write-file
      "write-file"
    seq > @
      *
        send-command
          write-file.chained
            * command-separator file.as-path
        output-multiline content
        get-confirmation

  [file] > read
    [items] > range
      QQ.structs.range > @
        []
          [num] > build
            num > @
            build (@.plus 1) > next
          build 0 > @
        items
    QQ.txt.text > read-file
      "read-file"
    seq > @
      *
        send-command
          read-file.chained
            * command-separator file.as-path
        QQ.io.stdin.next-line > metadata
        (QQ.txt.sscanf "(lines: %d)" metadata).at 0 > line-count
        joined. > content
          QQ.txt.text
            "\n"
          mapped.
            range
              line-count
            QQ.io.stdin.next-line > [i]
        content

  [command] > send-command
    QQ.io.stdout > @
      chained.
        QQ.txt.text
          "Request: "
        *
          QQ.txt.text
            command
          QQ.txt.text
            "\n"

  [] > get-response
    seq > @
      *
        QQ.io.stdin.next-line

  [] > get-confirmation
    seq > @
      *
        QQ.io.stdin.next-line

  [branch program-name] > version
    QQ.txt.text > get-version
      "get-version"
    seq > @
      *
        send-command
          get-version.chained
            * command-separator branch command-separator program-name
        get-response > version-number
        version-number

  [] > branch
    QQ.txt.text > get-branch
      "branch"
    seq > @
      *
        send-command
          get-branch
        get-response

  [] > program-name
    QQ.txt.text > program-name
      "program-name"
    seq > @
      *
        send-command
          program-name
        get-response

# Doctest
[] > doctest-entry
  seq > @
    *
      QQ.io.stdout
        "<MEANINGFUL-OUTPUT-START>"
      doctest
      QQ.io.stdout
        "<MEANINGFUL-OUTPUT-END>"

# Doctest
import io
import sys
def run_test(input_str, expected_output):
    sys.stdin = io.StringIO(input_str)
    captured_output = io.StringIO()
    sys.stdout = captured_output
    class QQ:
        class fs:
            class path:
                @staticmethod
                def at(index):
                    return "path"
                @staticmethod
                def joined(*args):
                    return "/".join(args)
            class file:
                @staticmethod
                def dirname(path):
                    return "dirname"
            class dir:
                @staticmethod
                def made():
                    return None
        class structs:
            class range:
                def __init__(self, start, end):
                    self.start = start
                    self.end = end
                def __iter__(self):
                    self.current = self.start
                    return self
                def __next__(self):
                    if self.current < self.end:
                        value = self.current
                        self.current += 1
                        return value
                    else:
                        raise StopIteration
            class list:
                  @staticmethod
                  def empty():
                      return []
                  @staticmethod
                  def tuple(*args):
                      return args
        class sys:
            class posix:
                @staticmethod
                def gettimeofday(*args):
                    return None
        class txt:
            @staticmethod
            def sprintf(format_str, *args):
                return format_str % args
            @staticmethod
            def text(text):
              return text
        class io:
            @staticmethod
            def stdout(text):
                print(text, end='')
            @staticmethod
            def stdin():
              class wrapper:
                def __init__(self,lines):
                  self.lines = lines
                  self.index = 0
                def next_line(self):
                  if self.index < len(self.lines):
                    line = self.lines[self.index]
                    self.index += 1
                    return line
                  else:
                    return ""
              return wrapper
    external_commands = {
        "get-version": lambda branch, program_name: "1.2.3",
        "branch": lambda: "main",
        "program-name": lambda: "myprogram",
        "write-file": lambda file, content: None,
        "read-file": lambda file: "1.2.3|||1678886400\n",
        "log":lambda text: print(f"Log: {text}",end=''),
    }
    def external_branch():
        return external_commands["branch"]()
    def external_program_name():
        return external_commands["program-name"]()
    def external_version(branch, program_name):
        return external_commands["get-version"](branch, program_name)
    def external_log(text):
      external_commands["log"](text)
    def external_read(file):
      return external_commands["read-file"](file)
    def external_write(file, content):
      return external_commands["write-file"](file,content)
    def external_line_counter(lines):
      print(f"(lines: {lines})\n", end='')
    def program_version(version_number, timestamp):
        return {"version-number": version_number, "timestamp": timestamp}
    def at_index(data, index):
        return data
    def sscanf(format_string, line):
        if format_string == "%s|||%d":
            parts = line.split("|||")
            if len(parts) == 2:
                try:
                    return [parts[0], int(parts[1])]
                except ValueError:
                    return [None, None]
        return [None, None]
    def times_func(count, func):
      for _ in range(count):
          func()
    def chained_func(*args):
      return "".join(str(arg) for arg in args)
    state_path = "state_path"
    branch = external_branch()
    program_name = external_program_name()
    current_version = external_version(branch, program_name)
    def currently_saved_data(branch, program_name):
      storage = program_data_storage(state_path)
      return storage["read"](branch, program_name)
    def program_data_storage(state_path):
      def data_file(branch,program_name):
        class file:
          @staticmethod
          def dirname():
            return 'dirname'
          @staticmethod
          def as_path(): return "path"
        return file
      def read(branch, program_name):
        file = data_file(branch, program_name)
        src = file().as_path()
        content = external_read(file())
        def program_data(branch, program_name, lines):
          versions = []
          for line in lines:
              version_number, timestamp = sscanf("%s|||%d", line)
              if version_number is not None and timestamp is not None:
                  versions.append(program_version(version_number, timestamp))
          return {"branch": branch, "program-name": program_name, "versions":versions, "output-as-rss": lambda:None}
        split_content = content.split("\n")
        return program_data(branch, program_name, split_content)
      def write(program_data_instance):
        file = data_file(program_data_instance["branch"], program_data_instance["program-name"])
        def reduced(initial_value, accumulator_function):
          result = initial_value
          for version in program_data_instance["versions"]:
                result = accumulator_function(result,version)
          return result
        def accumulator_function(accum,version):
          return chained_func(accum, version["version-number"], "|||", version["timestamp"], "\n")
        serialized_versions = reduced("", accumulator_function)
        external_log(serialized_versions)
        external_write(file(), serialized_versions)
        return program_data_instance
      return {"read":read, "write": write}
    def program_data(branch, program_name, versions):
        prefix = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>%s versions</title>\n  <link>https://search.nixos.org/packages?channel=%s&from=0&size=50&sort=relevance&type=packages&query=%s</link>\n  <description>History of versions</description>" % (program_name, branch, program_name)
        def output_middle_part(versions):
          for version in versions:
            print("  <item>\n    <title>%s</title>\n    <link>https://search.nixos.org/packages?channel=%s&from=0&size=50&sort=relevance&type=packages&query=%s</link>\n    <description>New version at %d</description>\n  </item>\n" % (version['version-number'], branch, program_name, version['timestamp']))
        suffix = "</channel>\n\n</rss>"
        print("Rss:\n", end='')
        external_line_counter(len(versions) + 10)
        print(prefix, end='')
        print("\n", end='')
        output_middle_part(versions)
        print(suffix, end='')
        print("\n", end='')
        def actualized(new_version):
            if len(versions) > 0 and versions[-1] == new_version:
                return versions
            else:
              return versions + [new_version]
        return {"output-as-rss": lambda:output_middle_part(versions), "actualized": actualized, "branch":branch, "program-name":program_name, "versions":versions }
    def version(branch, program_name):
        version_number = external_version(branch, program_name)
        timestamp = 1678886400
        return program_version(version_number, timestamp)
    def current_time():
        return 1678886400
    i = 0
    while i < 1:
      branch = external_branch()
      program_name = external_program_name()
      external_log("Reading...")
      data = currently_saved_data(branch, program_name)
      external_log("Getting current version")
      current_version_obj = version(branch, program_name)
      new_data = data["actualized"](current_version_obj)
      external_log("Writing...")
      program_data_storage(state_path)["write"](new_data)
      new_data["output-as-rss"]()
      i += 1
    sys.stdout = sys.__stdout__
    sys.stdin = sys.__stdin__
    return captured_output.getvalue().strip()