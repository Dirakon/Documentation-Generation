["<explanation>\nThe code defines an `app` object that manages program version tracking and generates an RSS feed of version history. Key components:\n\n1. **State Management**:\n- Uses `program-data-storage` to read/write version data to filesystem paths\n- Maintains versions with timestamps in `program-data` objects\n\n2. **Core Loop**:\n- Infinite loop checks current version from external source\n- Compares with stored versions using `actualized` method\n- Writes updated data and outputs RSS feed\n\n3. **External Interaction**:\n- `external` object handles I/O via command protocol:\n  * File operations use special \"Request: \" commands\n  * Version checking through external commands\n  * Structured input/output with line counting\n\n4. **RSS Generation**:\n- `output-as-rss` constructs XML feed from version history\n- Includes proper XML structure with dynamic content insertion\n- Tracks output line counts for validation\n\n5. **Data Structures**:\n- `program-version` represents individual versions\n- `program-data` aggregates versions with branch/program context\n- Command parameters are serialized with \"|||\" separators\n</explanation>\n\n<doctest-code>\n[] > doctest\n  app > @\n    \"state-dir\"\n\n  # Override external dependencies for test\n  [] > external\n    \"test-branch\" > branch\n    \"test-program\" > program-name\n    [branch program-name] > version\n      \"1.0.0\" > @\n    [file] > read\n      \"1.0.0|||1625097600\\n1.1.0|||1625184000\" > @\n    [file content] > write\n      seq > @\n        *\n          QQ.io.stdout\n            content\n</doctest-code>\n\n<doctest-stdin>\nRequest: get-version|||test-branch|||test-program\n1.0.0\n</doctest-stdin>\n\n<doctest-output>\nRss:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>test-program versions</title>\n  <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.0.0</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n    <description>New version at 1625097600</description>\n  </item>\n  <item>\n    <title>1.1.0</title>\n    <link>https://search.nixos.org/packages?channel=test-branch&from=0&size=50&sort=relevance&type=packages&query=test-program</link>\n    <description>New version at 1625184000</description>\n  </item>\n</channel>\n\n</rss>\n(lines: 23)\n</doctest-output>","<explanation>\nThe `program-data-storage` object manages persistent storage of program version data. It handles:\n\n1. File path construction using state directory, branch, and program name\n2. Data serialization/deserialization in \"version-number|||timestamp\" format\n3. Atomic write operations with directory creation\n4. Reading stored data with empty state initialization\n\nKey components:\n- `data-file`: Constructs file path and ensures directory exists\n- `read`: Loads data from file or returns empty state if nonexistent\n- `write`: Serializes and saves program versions with atomic replacement\n\nThe storage uses a simple text format with one version per line, maintaining history of version numbers with their timestamps. It coordinates with external commands for file operations through the `external` abstraction.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data-storage > storage\n    \"/test/path\"\n  seq > @\n    *\n      storage.write\n        program-data\n          \"nixos-unstable\"\n          \"firefox\"\n          (program-version \"115.0\" 1690000000).cons\n      storage.read\n        \"nixos-unstable\"\n        \"firefox\"\n      output-as-rss\n</doctest-code>\n<doctest-stdin>\nRequest: write-file|||/test/path/nixos-unstable/firefox\n(lines: 1)\n115.0|||1690000000\nRequest: read-file|||/test/path/nixos-unstable/firefox\n</doctest-stdin>\n<doctest-output>\nLog:\nReading...\nGetting current version\nWriting...\nRss:\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>firefox versions</title>\n  <link>https://search.nixos.org/packages?channel=nixos-unstable&from=0&size=50&sort=relevance&type=packages&query=firefox</link>\n  <description>History of versions</description>\n  <item>\n    <title>115.0</title>\n    <link>https://search.nixos.org/packages?channel=nixos-unstable&from=0&size=50&sort=relevance&type=packages&query=firefox</link>\n    <description>New version at 1690000000</description>\n  </item>\n</channel>\n\n</rss>\n(lines: 15)\n</doctest-output>","<explanation>\nThe `program-data` object manages program version data and generates an RSS feed. It takes three parameters: `branch`, `program-name`, and `versions`. Key features:\n\n1. **RSS Generation** (`output-as-rss`):\n   - Constructs an RSS XML with channel metadata\n   - Iterates over versions to create `<item>` entries\n   - Includes line counting for output validation\n   - Outputs XML structure with header, dynamic items, and footer\n\n2. **Version Management** (`actualized` method):\n   - Adds new versions while preventing duplicates\n   - Only appends a version if it's not already the latest entry\n   - Maintains historical version data in chronological order\n\nThe structure coordinates with external components for I/O operations while maintaining separation between data storage and presentation logic.\n</explanation>\n<doctest-code>\n[] > doctest\n  seq > @\n    *\n      program-data\n        \"nixos-unstable\"\n        \"firefox\"\n        *\n          program-version\n            \"115.0\"\n            1690000000\n          program-version\n            \"115.0.1\"\n            1690000001\n      output-as-rss\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 20)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>firefox versions</title>\n  <link>https://search.nixos.org/packages?channel=nixos-unstable&from=0&size=50&sort=relevance&type=packages&query=firefox</link>\n  <description>History of versions</description>\n  <item>\n    <title>115.0</title>\n    <link>https://search.nixos.org/packages?channel=nixos-unstable&from=0&size=50&sort=relevance&type=packages&query=firefox</link>\n    <description>New version at 1690000000</description>\n  </item>\n  <item>\n    <title>115.0.1</title>\n    <link>https://search.nixos.org/packages?channel=nixos-unstable&from=0&size=50&sort=relevance&type=packages&query=firefox</link>\n    <description>New version at 1690000001</description>\n  </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nThe `actualized` function in the `program-data` object updates the version history by conditionally appending a new version. It checks if the new version is already the last element in the current versions list. If so (and the list isn't empty), it returns the original list to avoid consecutive duplicates. Otherwise, it appends the new version. This ensures only non-consecutive duplicates are added to the version tracking system.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-version \"1.0.2\" 125 > new-ver\n  program-data > initial\n    \"test-branch\"\n    \"test-app\"\n    *\n      program-version \"1.0.0\" 12345\n      program-version \"1.0.1\" 12346\n  initial.actualized > updated\n    new-ver\n  updated.actualized > same\n    new-ver\n  seq > @\n    *\n      external.log \"Initial versions: 2\"\n      external.log \"Updated versions: 3\"\n      external.log \"Same versions: 3\"\n</doctest-code>\n<doctest-stdin>\n\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 1)\nInitial versions: 2\nLog:\n(lines: 1)\nUpdated versions: 3\nLog:\n(lines: 1)\nSame versions: 3\n</doctest-output>","<explanation>\nThe `program-version` object represents a software version with associated metadata. It takes two parameters during instantiation: `version-number` (string identifier) and `timestamp` (numeric timestamp). The object evaluates to its `version-number` when used directly. The timestamp remains accessible as an attribute. This structure serves as a data container for version information in the larger application context.\n</explanation>\n<doctest-code>\n[] > doctest\n  seq > @\n    *\n      program-version > v\n        \"1.0.0\"\n        1678901234\n      external.log\n        QQ.txt.sprintf \"Version: %s\" v\n      external.log\n        QQ.txt.sprintf \"Timestamp: %d\" v.timestamp\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 1)\nVersion: 1.0.0\nLog:\n(lines: 1)\nTimestamp: 1678901234\n</doctest-output>","<explanation>\nThe `external` object provides an interface for interacting with external systems, handling input/output operations, command sending, and response retrieval. It includes functions for logging, file operations, version checking, and command communication. Key features:\n\n1. **Command Communication**:\n   - `send-command`: Formats and sends commands to stdout with \"Request: \" prefix\n   - `get-response`/`get-confirmation`: Read responses from stdin\n\n2. **Logging Utilities**:\n   - `log`: Outputs messages with \"Log:\" header and line counting\n   - `output-multiline`: Handles multi-line content with automatic line counting\n\n3. **File Operations**:\n   - `write`: Serializes content to files with command protocol\n   - `read`: Reads files using command protocol and line-count metadata\n\n4. **System Interaction**:\n   - `version`: Retrieves program versions through command protocol\n   - `branch`/`program-name`: Gets current branch and program name\n\nThe object uses a custom protocol where commands are prefixed with \"Request: \" and responses are read from stdin, enabling interaction with external processes while maintaining functional purity through explicit IO handling.\n</explanation>\n<doctest-code>\n[] > doctest\n  seq > @\n    *\n      external.log\n        \"Test message\"\n      external.line-counter 3\n      QQ.io.stdout\n        external.version\n          \"branch\"\n          \"program\"\n</doctest-code>\n<doctest-stdin>\n1.2.3\n</doctest-stdin>\n<doctest-output>\nLog:\n(lines: 1)\nTest message\n(lines: 3)\nRequest: get-version|||branch|||program\n1.2.3\n</doctest-output>"]