["<explanation>\nEntry‐point that – given a state path – enters an endless loop where in each iteration it:\n• Retrieves the branch and program name via external commands.\n• Logs “Reading…”, then fetches any currently saved program data.\n• Logs “Getting current version” and obtains the current version (combining an external version string and the current time).\n• “Actualizes” the saved data by appending the new version.\n• Obtains a storage object (based on the state path) to write the updated data.\n• Logs “Writing…”, writes the new data to storage, and finally outputs an RSS‐formatted summary of the versions.\n</explanation>\n<doctest-code>\n[] > doctest\n  app > @\n    [\"dummy/state/path\"]\n</doctest-code>\n<doctest-stdin>\ndevelop\nmy-app\n1.0.0\nOK\n</doctest-stdin>\n<doctest-output>\nRequest: branch\nRequest: program-name\nLog:\nReading...\nLog:\nGetting current version\nRequest: get-version|||develop|||my-app\nLog:\nWriting...\nRss:\n(lines: 15)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>my-app versions</title>\n  <link>https://search.nixos.org/packages?channel=develop&from=0&size=50&sort=relevance&type=packages&query=my-app</link>\n  <description>History of versions</description>\n  <item>\n    <title>1.0.0</title>\n    <link>https://search.nixos.org/packages?channel=develop&from=0&size=50&sort=relevance&type=packages&query=my-app</link>\n    <description>New version at 1234567890</description>\n  </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nThis object manages storage for program data. It computes file paths from a given state path, branch and program name, and provides two main features: reading stored data from a file and writing updated data back. The write method serializes version entries (combining version numbers and timestamps) and logs the serialized result, while the read method retrieves and parses the stored data.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data-storage.write > @\n    { branch \"master\", program-name \"app\", versions [ { version-number \"1.0.0\", timestamp 123456 } ] }\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nLog:\n1.0.0|||123456\n</doctest-output>","<explanation>\nHolds program data (branch, program-name, and versions) and defines two key operations. The first, output-as-rss, generates and prints an RSS XML representation of the version history using the provided branch and program-name to customize the header and each version’s details. The second, actualized, checks if a new version is already the latest in the versions list and, if not, appends it.\n</explanation>\n<doctest-code>\n[] > doctest\n  program-data > @\n    \"stable\"\n    \"TestApp\"\n    QQ.structs.list\n      program-version > @\n        \"v1.0\"\n        123456789\n    .output-as-rss\n</doctest-code>\n<doctest-stdin>\n \n</doctest-stdin>\n<doctest-output>\nRss:\n(lines: 15)\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>TestApp versions</title>\n  <link>https://search.nixos.org/packages?channel=stable&from=0&size=50&sort=relevance&type=packages&query=TestApp</link>\n  <description>History of versions</description>\n  \n  <item>\n    <title>v1.0</title>\n    <link>https://search.nixos.org/packages?channel=stable&from=0&size=50&sort=relevance&type=packages&query=TestApp</link>\n    <description>New version at 123456789</description>\n  </item>\n</channel>\n\n</rss>\n</doctest-output>","<explanation>\nThe \"actualized\" method takes a single argument (new-version) and updates the program-data record. It uses the branch, program-name, and the current versions list from the surrounding program-data. If the new version is already the last element of the versions list (and the list is not empty), it keeps the list unchanged; otherwise, it appends the new version to the versions list.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%d\"\n      *\n        program-data\n          \"master\"\n          \"test\"\n          QQ.structs.list.tuple.empty\n          .actualized\n            program-version\n              \"v1\"\n              100\n        .versions.length\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n1\n</doctest-output>","<explanation>\nCreates a program-version object using a provided version number and timestamp, but only returns the version number.\n</explanation>\n<doctest-code>\n[] > doctest\n  QQ.io.stdout > @\n    QQ.txt.sprintf\n      \"%s\"\n      * program-version \"1.2\" 123456789\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\n1.2\n</doctest-output>","<explanation>\nProvides helper routines for managing external I/O commands. It formats and sends commands, processes multiline text output, logs messages, and handles simple file read/write operations by interacting with external systems.\n</explanation>\n<doctest-code>\n[] > doctest\n  external.send-command > @\n    \"TEST\"\n</doctest-code>\n<doctest-stdin>\n</doctest-stdin>\n<doctest-output>\nRequest: TEST\n</doctest-output>"]